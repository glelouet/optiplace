package fr.emn.optiplace.configuration.resources;

import java.util.Arrays;

import org.chocosolver.solver.variables.IntVar;

import fr.emn.optiplace.solver.choco.IReconfigurationProblem;

/**
 * <p>
 * pair of IntVar[] generated by a {@link ResourceHandler} on its associate
 * phase
 * </p>
 * <p>
 * A {@link ResourceSpecification} + a {@link IReconfigurationProblem} = a
 * {@link ResourceLoad} . <br />
 * Represents the effective use of a resource in a Choco problem, with IntVar
 * corresponding to the Vms static uses and the nodes dynamic uses. The uses are
 * assumed to be packed using the problem's packer.
 * <p>
 *
 * @author Guillaume Le LouÃ«t [guillaume.lelouet@gmail.com] 2013
 */
public class ResourceLoad {

	/**
	 * effective constant resource usage; ie the item i uses use[i] on the
	 * resource
	 */
	int[] itemsConsumptions = null;

	/** effective resource load of a bin (Node). */
	IntVar[] binsLoad = null;

	/** increased constant resource use on a bin */
	protected int[] nodesAdditionalByIndex = null;

	protected boolean hasAdditionalUse = false;

	public ResourceLoad() {
	}

	public ResourceLoad(int[] vmsLoad, IntVar[] binsLoad) {
		itemsConsumptions = vmsLoad;
		this.binsLoad = binsLoad;
		nodesAdditionalByIndex = new int[binsLoad.length];
		Arrays.fill(nodesAdditionalByIndex, 0);
	}

	/** @return the constant consumption of the vms */
	public int[] getVMsLoads() {
		return itemsConsumptions;
	}

	/** @return the uses of the nodes */
	public IntVar[] getNodesLoad() {
		return binsLoad;
	}

	/**
	 *
	 * @return the constant additional use of the nodes
	 */
	public int[] getAdditionalUse() {
		return nodesAdditionalByIndex;
	}

	/**
	 *
	 * @return true iff at least one node has an additional use
	 */
	public boolean isAdditionalUse() {
		return hasAdditionalUse;
	}

	/**
	 * set a VM as using its resources on given node, even if this VM is migrated
	 * to another host.
	 *
	 * @param n_i
	 *          the index of the node
	 * @param v_i
	 *          the index o the VM
	 */
	public void addUse(int n_i, int v_i) {
		nodesAdditionalByIndex[n_i] += itemsConsumptions[v_i];
		hasAdditionalUse = true;
	}

	public int getTotalVMLoads() {
		int ret = 0;
		for (int i : itemsConsumptions)
			ret += i;
		return ret;
	}

}